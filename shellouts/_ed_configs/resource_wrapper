#!/usr/bin/env python
#
#This file is part of "jiffy".
#
#Project: jiffy: A product for building and managing infrastructure: 
#cloud provider services, and servers and their configurations.
#
#Description: A product for building and managing infrastructure. 
#This includes third party API calls for services such as virtual
#cloud servers, load balancers, databases, and other. The product 
#manages connectivity and appropriate communication among these 
#aws.
#
#Copyright (C) Gary Leong - All Rights Reserved
#Unauthorized copying of this file, via any medium is strictly prohibited
#Proprietary and confidential
#Written by Gary Leong  <gwleong@gmail.com, September 17,2015

import jinja2
import os
import json
import sys
from time import sleep

from ed_helper_publisher.loggerly import ElasticDevLogger
from ed_helper_publisher.resource_manage import ResourceCmdHelper

class Main(ResourceCmdHelper):

    def __init__(self,**kwargs):

        ResourceCmdHelper.__init__(self)
        self.classname = 'TerraformWrapper'
        self.logger = ElasticDevLogger(self.classname,logcategory="cloudprovider")
        self.logger.debug("Instantiating %s" % self.classname)

        _terraform_dir = os.environ.get("TERRAFORM_DIR","var/tmp/terraform")
        self.variables_template = os.environ.get("TERRAFORM_TEMPLATE","variables.ja2")
        self.variables_file = os.environ.get("TERRAFORM_VARIABLES_FILE","variables.tf")

        self.run_dir = os.getcwd()
        self.terraform_dir = os.path.join(self.run_dir,_terraform_dir)
        #self.variables_template = os.path.join(self.terraform_dir,_variables_template)
        #self.variables_file = os.path.join(self.terraform_dir,_variables_file)

    def _templify(self,**kwargs):

        clobber = kwargs.get("clobber")
        variables_file_path = os.path.join(self.terraform_dir,self.variables_file)
        variables_template_path = os.path.join(self.terraform_dir,self.variables_template)

        # Testingyoyo
        self.logger.debug("a"*32)
        self.logger.debug("a"*32)
        self.logger.debug("")
        self.logger.debug(clobber)
        self.logger.debug("")
        self.logger.debug(os.getcwd())
        self.logger.debug("")
        self.logger.debug(self.run_dir)
        self.logger.debug("")
        self.logger.debug(self.terraform_dir)
        self.logger.debug("")
        
        self.logger.debug("a"*32)
        self.logger.debug("a"*32)

        if os.path.exists(variables_file_path) and not clobber:
            self.logger.warn("terraform variables file already exists at {} - skipping templifying of it".format(variables_file_path))
            return

        if not os.path.exists(variables_template_path):
            self.logger.error("terraform variables template does not exists at {} - skipping templifying of it".format(variables_template_path))
            os.chdir(self.run_dir)
            exit(9)
            return

        self.logger.debug("creating terraform variables file {} from {}".format(variables_file_path,variables_template_path))
        self.logger.debug("creating terraform variables file {} from {}".format(variables_file_path,variables_template_path))
        self.logger.debug("creating terraform variables file {} from {}".format(variables_file_path,variables_template_path))
        self.logger.debug("creating terraform variables file {} from {}".format(variables_file_path,variables_template_path))
        self.logger.debug("creating terraform variables file {} from {}".format(variables_file_path,variables_template_path))
        self.logger.debug("creating terraform variables file {} from {}".format(variables_file_path,variables_template_path))
        self.logger.debug("creating terraform variables file {} from {}".format(variables_file_path,variables_template_path))
        self.logger.debug("creating terraform variables file {} from {}".format(variables_file_path,variables_template_path))
        self.logger.debug("creating terraform variables file {} from {}".format(variables_file_path,variables_template_path))

        templateVars = {}

        for _var in os.environ["OS_TEMPLATE_VARS"].split(","):
            var = _var.strip().upper()
            if not os.environ.get(var): continue
            templateVars[var] = os.environ[var]

        templateLoader = jinja2.FileSystemLoader(searchpath="/")
        templateEnv = jinja2.Environment(loader=templateLoader)
        template = templateEnv.get_template(variables_template_path)
        outputText = template.render( templateVars )
        writefile = open(variables_file_path,"wb")
        writefile.write(outputText)
        writefile.close()
   
    def _format_output(self,**kwargs):

        results = []

        output = kwargs["output"]
        convert_to_json= kwargs.get("convert_to_json")

        for _output in output:
            if not _output.strip(): continue
            results.append(_output)

        if not convert_to_json: return results

        return json.loads(results)

    def _add_tags(self,resource):

        tags = os.environ.get("RESOURCE_TAGS")
        if not tags: return

        tags = [ tag.strip() for tag in tags.split(",") ]
        if not resource.get("tags"): resource["tags"] = []
        resource["tags"].extend(tags)
        resource["tags"].append("terraform")

        # remove duplicates
        resource["tags"] = list(set(resource["tags"]))
 
        return resource

    def create(self):

        self._templify(**self.inputargs)

        variables_file_path = os.path.join(self.terraform_dir,self.variables_file)

        if not os.path.exists(variables_file_path):
            self.logger.warn("terraform variables file must exists at {} - something went wrong".format(variables_file_path))
            os.chdir(self.run_dir)
            exit(9)

        if not os.path.exists(self.terraform_dir):
            self.logger.warn("terraform directory must exists at {} - something went wrong".format(self.terraform_dir))
            os.chdir(self.run_dir)
            exit(9)

        os.chdir(self.terraform_dir)

        cmds = [ "terraform init" ]
        cmds.append("terraform plan")

        for cmd in cmds:
            self.execute(cmd,convert_to_json=False,exit_error=True)

        cmd = [ "terraform apply -auto-accept" ]
        output = self.execute(cmd,convert_to_json=False,exit_error=True).get("output")
        output = self._format_output(output=output,convert_to_json=True)

        resource = output
        resource["resource_type"] = os.environ["RESOURCE_TYPE"]
        resource["method"] = "terraform"
        #resource["provider"] = "terraform"
        self._add_tags(resource)
        if not resource.get("_id"): resource["_id"] = output["id"]

        resource["destroy"] = {"shelloutconfig":"elasticdev:::terraform::resource_wrapper"}
        resource["destroy"]["env_vars"] = json.dumps({"METHOD":"destroy"})

        os.chdir(self.run_dir)

        self.successful_output(output=resource)

    def destroy(self):

        os.chdir(self.terraform_dir)

        cmds = [ "terraform init" ]
        cmds.append("terraform destroy -auto-approve")

        for cmd in cmds:
            for retry in range(0,3):
                results = self.execute(cmd,convert_to_json=None)
                if results.get("status") is True: break
                self.logger.debug('having trouble destroying terraform resource at "{}"'.format(self.terraform_dir))
                sleep(1)

            self.successful_output(output=results["output"])

        os.chdir(self.run_dir)

        failed_message = "could not delete terraform resource at {}".format(self.terraform_dir)
        self.cmd_failed(failed_message=failed_message)

def usage():

    print """
script + environmental variables

or

script + json_input (as argument)

environmental variables:
    basic:
        METHOD
        TERRAFORM_DIR (optional)
        TERRAFORM_TEMPLATE (optional)
        TERRAFORM_VARIABLES_FILE (optional)
        CLOBBER (optional - to clobber existing templified if it exists already)

    create:
        RESOURCE_TYPE
        RESOURCE_TAGS
        OS_TEMPLATE_VARS

    destroy:

       """
    exit(4)

if __name__ == '__main__':

    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    if json_input:
        main.set_inputargs(json_input=json_input)
    else:
        set_env_vars = [ "method",
                         "clobber",
                         "terraform_dir",
                         "terraform_template",
                         "terraform_variables_file",
                         "resource_type",
                         "resource_tags",
                         "os_template_vars" ]

        main.set_inputargs(set_env_vars=set_env_vars)
   
    method = main.inputargs.get("method")

    if not method:
        print "method/ENV VARIABLE METHOD is needed"
        exit(4)

    if method == "create":

        main.check_required_inputargs(keys=["resource_type","os_template_vars"])
        main.create()

    elif method == "destroy":
        main.destroy()

    else:
        usage()
        print 'method "{}" not supported!'.format(method)
        exit(4)
