#!/usr/bin/env python
#
#This file is part of "jiffy".
#
#Project: jiffy: A product for building and managing infrastructure: 
#cloud provider services, and servers and their configurations.
#
#Description: A product for building and managing infrastructure. 
#This includes third party API calls for services such as virtual
#cloud servers, load balancers, databases, and other. The product 
#manages connectivity and appropriate communication among these 
#aws.
#
#Copyright (C) Gary Leong - All Rights Reserved
#Unauthorized copying of this file, via any medium is strictly prohibited
#Proprietary and confidential
#Written by Gary Leong  <gwleong@gmail.com, June 17,2020

import jinja2
import os
import json
import sys
from time import sleep

from ed_helper_publisher.loggerly import ElasticDevLogger
from ed_helper_publisher.resource_manage import ResourceCmdHelper
from ed_helper_publisher.output import convert_ed_output_to_values

class Main(ResourceCmdHelper):

    def __init__(self,**kwargs):

        ResourceCmdHelper.__init__(self,app_name="terraform",must_exists=["stateful_id"])

        self.classname = 'TerraformWrapper'
        self.logger = ElasticDevLogger(self.classname,logcategory="cloudprovider")
        self.logger.debug("Instantiating %s" % self.classname)
        self._set_overides(**kwargs)

    def _set_overides(self,**kwargs):

        # The postscript file that will be execute after terraform execution is completed.
        # Typically, this file reads the tfstate file, prints to the standard out to be recorded
        # and stored in the ED resource table to be used/referenced by other automation.
        self.postscript = os.environ.get("POSTSCRIPT","tfstate_to_output")

        # stateful_dir
        self.stateful_dir = self.get_env_var("STATEFUL_DIR")

        # credentials directory
        if self.stateful_dir:
            self.creds_dir = os.path.join(self.stateful_dir,".creds")
        else:
            self.creds_dir = None

        # The names of the terraform files that are templated and need to be 
        # rendered.  This is typically variables with a "ja2" suffix for
        # jinja2 which is used for templating and rendering
        self.terraform_template_files = self.get_env_var("TERRAFORM_TEMPLATE_FILES")

        if not self.terraform_template_files:
            self.terraform_template_files = [ "variables" ]
        else:
            self.terraform_template_files = [ template_file.strip() for template_file in self.terraform_template_files.split(",") ]

        #app_dir = os.path.join(self.run_dir,self.working_subdir)
        self.postscript_path = os.path.join(self.app_dir,self.postscript)

    #def _templify(self,**kwargs):

    #    clobber = kwargs.get("clobber")

    #    for template_file in self.terraform_template_files:

    #        template_filepath = os.path.join(self.app_dir,"{}.ja2".format(template_file))
    #        file_path = os.path.join(self.app_dir,"{}.tf".format(template_file))

    #        if os.path.exists(file_path) and not clobber:
    #            self.logger.warn("terraform variables file already exists at {} - skipping templifying of it".format(file_path))
    #            return

    #        tf_template_vars = self.get_env_var("TF_TEMPLATE_VARS")
    #        if not tf_template_vars:
    #            self.logger.warn("TF_TEMPLATE_VARS not set - skipping variables.tf creation".format(template_filepath))
    #            os.chdir(self.run_dir)
    #            return

    #        if not os.path.exists(template_filepath):
    #            self.logger.warn("terraform variables template does not exists at {} - skipping templifying of it".format(template_filepath))
    #            os.chdir(self.run_dir)
    #            return
    #            #exit(9)

    #        self.logger.debug("creating terraform variables file {} from {}".format(file_path,template_filepath))

    #        templateVars = {}

    #        for _var in tf_template_vars.split(","):
    #            var = _var.strip().upper()
    #            if not os.environ.get(var): continue
    #            # For Terraform, you need to use double quotes instead of second quotes
    #            templateVars[var] = os.environ[var].replace("'",'"')

    #        templateLoader = jinja2.FileSystemLoader(searchpath="/")
    #        templateEnv = jinja2.Environment(loader=templateLoader)
    #        template = templateEnv.get_template(template_filepath)
    #        outputText = template.render( templateVars )
    #        writefile = open(file_path,"wb")
    #        writefile.write(outputText)
    #        writefile.close()
   
    def _get_state_info(self):

        if not os.path.exists(self.postscript_path):
            self.logger.warn("post script {} does not exists".format(self.postscript_path))
            return 

        os.chdir(self.app_dir)
        cmd = [ self.postscript_path ]

        try:
            output = self.execute(cmd,output_to_json=False,exit_error=True).get("output")
        except:
            self.logger.debug("{} failed at terraform dir {}".format(self.postscript_path,self.app_dir))
            exit(9)

        values = convert_ed_output_to_values(output)
        os.chdir(self.run_dir)

        return values

    def _get_resource_info(self):

        resource = self._get_state_info()
        if not resource: return 

        if not isinstance(resource,dict) and not isinstance(resource,list):
            self.logger.warn("resource needs to be a dictionary or list!")
            exit(9)

        if isinstance(resource,dict): 
            self.add_resource_tags(resource)
            self._add_destroy_parameters(resource)

        if isinstance(resource,list):
            for _resource in resource:
                self.add_resource_tags(_resource)
                if not _resource.get("main"): continue
                self._add_destroy_parameters(_resource)

        return resource

    def _add_destroy_parameters(self,resource):

        '''
        we typically load the destroy parameters along with created resource like a 
        VPC or database 

        the resource is therefore self contained, whereby it specifies to the 
        system how it can be destroyed.

        for terraform, we include things like the docker image used to 
        destroy the resource and any environmental variables 
        '''

        # Create destroy resource arguments and reference
        resource["destroy"] = {"shelloutconfig":self.shelloutconfig}

        # environmental variables to include during destruction
        env_vars = {"METHOD":"destroy"}
        if self.destroy_env_vars: env_vars = dict(env_vars,**self.destroy_env_vars)

        if self.stateful_id: env_vars["STATEFUL_ID"] = self.stateful_id

        if self.inputargs.get("use_docker"):
            resource["method"] = "terraform_docker_env"
            env_vars["USE_DOCKER"] = True
            env_vars["DOCKER_EXEC_ENV"] = self.docker_image
        else:
            resource["working_subdir"] = self.working_subdir
            resource["method"] = "terraform"

        resource["destroy"]["env_vars"] = json.dumps(env_vars)
        if env_vars.get("STATEFUL_ID"): resource["destroy"]["stateful_id"] = env_vars["STATEFUL_ID"]

        if self.destroy_execgroup: resource["destroy"]["execgroup"] = self.destroy_execgroup

        # by default, we include default AWS credentials to be inserted during the destroy.  
        # we can also modify this script, upload, and version it to include things like GCP and Azure credentials.
        resource["destroy"]["insert_env_vars"] = json.dumps(["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"])

        return resource

    def _exec_local_create(self):

        '''
        executes terraform locally on the work rather than a specific 
        docker container
        '''

        cmds = [ "terraform init" ]
        cmds.append("chmod -R 777 .terraform")
        cmds.append("terraform plan")

        os.chdir(self.app_dir)
        
        for cmd in cmds: self.execute(cmd,output_to_json=False,exit_error=True)

        cmd = "terraform apply -auto-approve"
        results = self.execute(cmd,output_to_json=False,exit_error=False)

        if results.get("status") is False: 
            cmd = "terraform destroy -auto-approve"
            self.execute(cmd,output_to_json=False,exit_error=False)
            self.logger.error("terraform create failed! tried to revert changes")
            exit(9)

        return results

    def _get_env_filepath(self):

        _docker_env_file = self.get_env_var("DOCKER_ENV_FILE",default=".env")
        self.docker_env_file = os.path.join(os.getcwd(),_docker_env_file)

        return self.docker_env_file

    def _create_env_file(self,method,create_env=True):

        try:
            tf_keys = [ tf_key for tf_key in os.environ.keys() if "TF_VAR" in tf_key ]
        except:
            tf_keys = None

        docker_env_fields = self.get_env_var("DOCKER_ENV_FIELDS")
        self._get_env_filepath()

        self.logger.debug("Writing environment file {} with field {}".format(self.docker_env_file,docker_env_fields))

        f = open(self.docker_env_file,"w")
        f.write("{}={}".format("METHOD",method))

        if tf_keys:
            for tf_key in tf_keys:
                tf_value = os.environ.get(tf_key)
                if not tf_key: continue
                f.write("\n")
                f.write("{}={}".format(tf_key,tf_value))

        if docker_env_fields: 
            for docker_env_field in docker_env_fields.split(","):
                if not os.environ.get(docker_env_field.strip().upper()): continue
                f.write("\n")
                f.write("{}={}".format(docker_env_field.strip().upper(),os.environ[docker_env_field.strip().upper()]))

        f.close()

        return self.docker_env_file

    def _cleanup_docker_exec_env(self):

        os.chdir(self.app_dir)
        cmd = "rm -rf {}".format(self.run_share_dir)
        self.execute(cmd,output_to_json=False,exit_error=False)

    def _exec_docker_run(self,method=None):

        os.chdir(self.run_share_dir)

        if not os.path.exists(self.docker_env_file):
            self.logger.error("Cannot find environmental file {}".format(self.docker_env_file))
            exit(9)

        if method:
            cmd = 'docker run -e METHOD="{}" --env-file {} --rm -v {}:{} {}'.format(method,
                                                                                    self.docker_env_file,
                                                                                    self.run_share_dir,
                                                                                    self.share_dir,
                                                                                    self.docker_image)
        else:
            cmd = 'docker run --env-file {} --rm -v {}:{} {}'.format(self.docker_env_file,
                                                                     self.run_share_dir,
                                                                     self.share_dir,
                                                                     self.docker_image)

        self.logger.debug(cmd)

        return self.execute(cmd,output_to_json=False,exit_error=False)

    def _set_exec_docker_dir(self):

        # create working docker run directory
        cmds = []

        _dirname = os.path.dirname(self.run_share_dir)
        if not os.path.exists(_dirname):
            cmds.append("mkdir -p {}".format(_dirname))

        self.logger.debug("rsync -avug {}/ {}".format(self.app_dir,self.run_share_dir))

        if self.creds_dir and os.path.exists(self.creds_dir):
            cmds.append("rsync -avug {} {}/".format(self.creds_dir,self.app_dir))

        cmds.append("rsync -avug {}/ {}".format(self.app_dir,self.run_share_dir))

        for cmd in cmds:
            self.execute(cmd,output_to_json=False,exit_error=True)

        return True

    def _exec_docker_create(self):

        self._set_exec_docker_dir()
        self._create_env_file(method,create_env=True)
        results = self._exec_docker_run(method="create")

        if results.get("status") is False: 
            results = self._exec_docker_run(method="destroy")
            #self._cleanup_docker_exec_env()
            self.logger.error("Terraform create failed here {}! Tried to revert changes".format(self.run_share_dir))
            exit(9)

        cmd = "rsync -avug {}/ {}".format(self.run_share_dir,self.app_dir)
        self.logger.debug(cmd)

        try:
            self.execute(cmd,output_to_json=False,exit_error=True)
        except:
            os.system(cmd)

        return results

    def _exec_docker_destroy(self):

        self._set_exec_docker_dir()
        self._get_env_filepath()

        results = self._exec_docker_run(method="destroy")

        return results

    def _exec_local_destroy(self):

        if os.path.exists(self.app_dir):
            exec_dir = self.app_dir
        else:
            exec_dir = self.run_dir

        os.chdir(exec_dir)

        cmds = [ "chmod -R 777 .terraform" ]
        #cmds.append("terraform init")
        cmds.append("terraform destroy -auto-approve")

        for cmd in cmds:
            for retry in range(0,3):
                results = self.execute(cmd,output_to_json=None)
                if results.get("status") is True: return results
                self.logger.debug('having trouble destroying terraform resource at "{}"'.format(exec_dir))
                sleep(1)

        return results

    def create(self):

        if self.use_docker and not self.stateful_id:
            self.logger.error("STATEFUL_ID needs to be set for using of docker run environments")

        #self._templify(**self.inputargs)
        self.templify(app_template_vars="TF_TEMPLATE_VARS",**self.inputargs)

        if not os.path.exists(self.app_dir):
            self.logger.warn("terraform directory must exists at {} - something went wrong".format(self.app_dir))
            os.chdir(self.run_dir)
            exit(9)

        if not os.path.exists(self.postscript_path):
            self.logger.warn("script to parse terraform must exists here {}".format(self.postscript_path))
            exit(9)

        if self.inputargs.get("use_docker"): 
            results = self._exec_docker_create()
        else:
            results = self._exec_local_create()

        if results.get("output"):
            self.logger.debug(results.get("output"))

        os.chdir(self.run_dir)
        resource = self._get_resource_info()

        if not resource: 
            self.logger.warn("resource info is not found in the output - check out running environment {}".format(self.run_share_dir))
            return

        try:
            resource = self.convert_to_json(resource)
            resource["source_method"] = "terraform"
        except:
            self.logger.warn("could not convert resource to json")

        # print the output with _ed delimiters
        self.print_output(output=resource)

        # clean up run_share_dir that was used for docker execution
        self._cleanup_docker_exec_env()

    def destroy(self):

        if not self.inputargs.get("use_docker"): 
            results = self._exec_local_destroy()
        else:
            results = self._exec_docker_destroy()

        if results.get("output"):
            self.logger.debug(results.get("output"))

        # clean up run_share_dir that was used for docker execution
        self._cleanup_docker_exec_env()

        os.chdir(self.run_dir)
        self.successful_output(output=results.get("output"))

def usage():

    print """
script + environmental variables

or

script + json_input (as argument)

environmental variables:

    basic:
        USE_DOCKER (optional for USE_DOCKER) - use docker container for execution
        STATEFUL_ID (needed for USE_DOCKER) - the stateful_id to reference the state of the execution
        DOCKER_ENV_FIELDS (optional for USE_DOCKER) - the environmental keys to create environmental file 
        DOCKER_EXEC_ENV (default elasticdev/terraform-run-env) - the docker container/image to run execution
        DOCKER_ENV_FILE (default .env) - name of the docker env file to create
        SHARE_DIR (default is /var/tmp/share) - the shared directory that is shared with the worker during docker container execution

        METHOD - create/destroy

        TERRAFORM_DIR (optional) - we use the terraform directory relative to execution directory
        WORKING_SUBDIR (optional) - if TERRAFORM_DIR not set, we use the WORKING_SUBDIR to reference terraform build environment
        CLOBBER (optional) - clobbers existing templified files if they already exist)
        TERRAFORM_TEMPLATE_FILES (optional) - template files to create configuration files 

        POSTSCRIPT (optional) - run after the execution.  typically used to parse the terraform state file

    create:
        RESOURCE_TYPE
        RESOURCE_TAGS
        TF_TEMPLATE_VARS - environmental variables use for templating terraform files

    destroy:

       """
    exit(4)

if __name__ == '__main__':

    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    if json_input:
        main.set_inputargs(json_input=json_input)
    else:
        set_env_vars = [ "method",
                         "use_docker",
                         "clobber",
                         "working_dir",
                         "terraform_dir",
                         "terraform_template_files",
                         "resource_type",
                         "resource_tags",
                         "tf_template_vars" ]

        main.set_inputargs(set_env_vars=set_env_vars)
   
    method = main.inputargs.get("method")

    if not method:
        print "method/ENV VARIABLE METHOD is needed"
        exit(4)

    if method == "create":
        main.create()
        #main.check_required_inputargs(keys=["tf_template_vars"])

    elif method == "destroy":
        main.destroy()

    else:
        usage()
        print 'method "{}" not supported!'.format(method)
        exit(4)
