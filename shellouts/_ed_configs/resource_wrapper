#!/usr/bin/env python
#
#This file is part of "jiffy".
#
#Project: jiffy: A product for building and managing infrastructure: 
#cloud provider services, and servers and their configurations.
#
#Description: A product for building and managing infrastructure. 
#This includes third party API calls for services such as virtual
#cloud servers, load balancers, databases, and other. The product 
#manages connectivity and appropriate communication among these 
#aws.
#
#Copyright (C) Gary Leong - All Rights Reserved
#Unauthorized copying of this file, via any medium is strictly prohibited
#Proprietary and confidential
#Written by Gary Leong  <gwleong@gmail.com, September 17,2015

import jinja2
import os
import json
import sys
from time import sleep

from ed_helper_publisher.loggerly import ElasticDevLogger
from ed_helper_publisher.resource_manage import ResourceCmdHelper
from ed_helper_publisher.output import convert_ed_output_to_values

class Main(ResourceCmdHelper):

    def __init__(self,**kwargs):

        ResourceCmdHelper.__init__(self)
        self.classname = 'TerraformWrapper'
        self.logger = ElasticDevLogger(self.classname,logcategory="cloudprovider")
        self.logger.debug("Instantiating %s" % self.classname)

        self.working_subdir = os.environ.get("TERRAFORM_DIR")
        if not self.working_subdir: self.working_subdir = os.environ.get("WORKING_DIR","var/tmp/terraform")

        self.print_ed_output = os.environ.get("TERRAFORM_PARSE_STATE","print_ed_output")
        self.terraform_template_files = os.environ.get("TERRAFORM_TEMPLATE_FILES")

        if not self.terraform_template_files:
            self.terraform_template_files = [ "variables" ]
        else:
            self.terraform_template_files = [ template_file.strip() for template_file in self.terraform_template_files.split(",") ]

        self.run_dir = os.getcwd()
        self.terraform_dir = os.path.join(self.run_dir,self.working_subdir)
        self.print_ed_output_path = os.path.join(self.terraform_dir,self.print_ed_output)

    def _templify(self,**kwargs):

        clobber = kwargs.get("clobber")

        for template_file in self.terraform_template_files:

            template_filepath = os.path.join(self.terraform_dir,"{}.ja2".format(template_file))
            file_path = os.path.join(self.terraform_dir,"{}.tf".format(template_file))

            if os.path.exists(file_path) and not clobber:
                self.logger.warn("terraform variables file already exists at {} - skipping templifying of it".format(file_path))
                return

            if not os.path.exists(template_filepath):
                self.logger.error("terraform variables template does not exists at {} - skipping templifying of it".format(template_filepath))
                os.chdir(self.run_dir)
                exit(9)
                return

            self.logger.debug("creating terraform variables file {} from {}".format(file_path,template_filepath))

            templateVars = {}

            for _var in os.environ["OS_TEMPLATE_VARS"].split(","):
                var = _var.strip().upper()
                if not os.environ.get(var): continue
                # For Terraform, you need to use double quotes instead of second quotes
                templateVars[var] = os.environ[var].replace("'",'"')

            templateLoader = jinja2.FileSystemLoader(searchpath="/")
            templateEnv = jinja2.Environment(loader=templateLoader)
            template = templateEnv.get_template(template_filepath)
            outputText = template.render( templateVars )
            writefile = open(file_path,"wb")
            writefile.write(outputText)
            writefile.close()
   
    def _format_output(self,**kwargs):

        results = []

        output = kwargs["output"]
        output_to_json= kwargs.get("output_to_json")

        for _output in output:
            if not _output.strip(): continue
            results.append(_output)

        if not output_to_json: return results

        return json.loads(results)

    def _add_tags(self,resource):

        tags = os.environ.get("RESOURCE_TAGS")
        if not tags: return

        tags = [ tag.strip() for tag in tags.split(",") ]
        if not isinstance(resource.get("tags"),list): resource["tags"] = []
        resource["tags"].extend(tags)
        resource["tags"].append("terraform")

        # remove duplicates
        resource["tags"] = list(set(resource["tags"]))
 
        return resource

    def _get_state_info(self):

        os.chdir(self.terraform_dir)
        cmd = [ "./{}".format(self.print_ed_output) ]
        output = self.execute(cmd,output_to_json=False,exit_error=True).get("output")
        values = convert_ed_output_to_values(output)
        os.chdir(self.run_dir)

        return values

    def get_resource_info(self):

        resource = self._get_state_info()

        if not isinstance(resource,dict): 
            self.logger.warn("resource needs to be a dictionary!")
            exit(9)

        resource["method"] = "terraform"
        resource["stateful_dir"] = self.terraform_dir
        resource["working_subdir"] = self.working_subdir
        self._add_tags(resource)

        if not resource.get("_id") and isinstance(resource,dict): 
            resource["_id"] = resource["id"]

        #resource["destroy"] = {"shelloutconfig":"elasticdev:::terraform::resource_wrapper:57"}
        resource["destroy"] = {"shelloutconfig":"elasticdev:::terraform::resource_wrapper"}
        resource["destroy"]["env_vars"] = json.dumps({"METHOD":"destroy"})

        return resource

    def create(self):

        self._templify(**self.inputargs)

        if not os.path.exists(self.terraform_dir):
            self.logger.warn("terraform directory must exists at {} - something went wrong".format(self.terraform_dir))
            os.chdir(self.run_dir)
            exit(9)

        if not os.path.exists(self.print_ed_output_path):
            self.logger.warn("script to parse terraform must exists here {}".format(self.print_ed_output_path))
            exit(9)

        cmds = [ "terraform init" ]
        cmds.append("terraform plan")
        cmds.append("terraform apply -auto-approve")

        os.chdir(self.terraform_dir)
        for cmd in cmds:
            self.execute(cmd,output_to_json=False,exit_error=True)

        resource = self.get_resource_info()

        self.print_output(output=resource)

    def destroy(self):

        if os.path.exists(self.terraform_dir):
            _dir = self.terraform_dir
        else:
            _dir = self.run_dir

        os.chdir(_dir)

        #cmds = [ "rm -rf .terraform" ]
        cmds = [ "chmod -R 777 .terraform" ]
        cmds.append("terraform init")
        cmds.append("terraform destroy -auto-approve")

        for cmd in cmds:
            for retry in range(0,3):
                results = self.execute(cmd,output_to_json=None)
                if results.get("status") is True: break
                self.logger.debug('having trouble destroying terraform resource at "{}"'.format(_dir))
                sleep(1)

        os.chdir(self.run_dir)
        #os.system("rm -rf {}".format(_dir))
        self.successful_output(output=results["output"])
        #self.cmd_failed(failed_message=failed_message)

def usage():

    print """
script + environmental variables

or

script + json_input (as argument)

environmental variables:
    basic:
        METHOD
        TERRAFORM_DIR (optional)
        WORKING_DIR (optional)
        TERRAFORM_TEMPLATE_FILES (optional)
        CLOBBER (optional - to clobber existing templified if it exists already)

    create:
        RESOURCE_TYPE
        RESOURCE_TAGS
        OS_TEMPLATE_VARS

    destroy:

       """
    exit(4)

if __name__ == '__main__':

    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    if json_input:
        main.set_inputargs(json_input=json_input)
    else:
        set_env_vars = [ "method",
                         "clobber",
                         "working_dir",
                         "terraform_dir",
                         "terraform_template_files",
                         "resource_type",
                         "resource_tags",
                         "os_template_vars" ]

        main.set_inputargs(set_env_vars=set_env_vars)
   
    method = main.inputargs.get("method")

    if not method:
        print "method/ENV VARIABLE METHOD is needed"
        exit(4)

    if method == "create":

        main.check_required_inputargs(keys=["resource_type","os_template_vars"])
        main.create()

    elif method == "destroy":
        main.destroy()

    else:
        usage()
        print 'method "{}" not supported!'.format(method)
        exit(4)

